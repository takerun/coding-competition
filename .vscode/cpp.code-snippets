{
    "[Initialization] G++ Code": {
        "prefix": "g++",
        "body": [
            "// #pragma GCC optimize(\"unroll-loops\")",
            "// #pragma GCC optimize(\"O3\")",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "#define fastIO()                      \\",
            "    ios_base::sync_with_stdio(false); \\",
            "    cin.tie(nullptr);                 \\",
            "    cout.tie(nullptr)",
            "#define endl \"\\n\"",
            "void Yes(bool a) { cout << (a ? \"Yes\" : \"No\") << endl; }",
            "typedef long long int int64;",
            "",
            "int main() {",
            "    fastIO();",
            "    // input",
            "",
            "    // logic",
            "",
            "    // output",
            "",
            "    return 0;",
            "}",
        ],
    },
    "[Include] modint998244353": {
        "prefix": "include_modint998244353",
        "body": [
            "#include <atcoder/modint>",
            "using mint = atcoder::modint998244353;"
        ],
    },
    "[Include] modint1000000007": {
        "prefix": "include_modint1000000007",
        "body": [
            "#include <atcoder/modint>",
            "using mint = atcoder::modint1000000007;"
        ],
    },
    "[Include] bit": {
        "prefix": "include_bit",
        "body": [
            "// https://atcoder.github.io/ac-library/production/document_ja/fenwicktree.html",
            "#include <atcoder/fenwicktree>",
            "using fenwick_tree = atcoder::fenwick_tree<int>;"
        ],
        "description": "include Binary-Indexed tree(Fenwick tree)"
    },
    "[Include] dsu": {
        "prefix": "include_dsu",
        "body": [
            "// https://atcoder.github.io/ac-library/production/document_en/dsu.html",
            "#include <atcoder/dsu>",
            "using dsu = atcoder::dsu;"
        ],
        "description": "include dsu(Union-Find tree)"
    },
    "[Include] segtree": {
        "prefix": "include_segtree",
        "body": [
            "// https://atcoder.github.io/ac-library/production/document_en/segtree.html",
            "#include <atcoder/segtree>",
            "using S = int64;                        // モノイドの型",
            "S op(S a, S b) { return max(a, b); }  // 取得演算: a+b, a*b, max(a,b)",
            "S e() { return 0; }                   // 単位元: 0, 1, -INF",
            "using segtree = atcoder::segtree<S, op, e>;",
            "// usage:",
            "// segtree seg(N);",
        ],
    },
    "[Include] lazy segtree": {
        "prefix": "include_lazy_segtree",
        "body": [
            "// https://atcoder.github.io/ac-library/document_en/lazysegtree.html",
            "// https://betrue12.hateblo.jp/entry/2020/09/23/005940",
            "#include <atcoder/lazysegtree>",
            "// 区間加算、区間最大値",
            "using S = int64;                           // モノイドの型",
            "S op(S a, S b) { return max(a, b); }       // 取得演算: max(a,b), min(a,b)",
            "S e() { return LLONG_MIN; }                  // 単位元: -INF, INF",
            "using F = int64;                           // 操作の型",
            "S mapping(F f, S x) { return f + x; }      // 操作演算:",
            "F composition(F f, F g) { return f + g; }  // 写像の合成:",
            "F id() { return 0; }                       // 恒等写像:",
            "using lazy_segtree =",
            "    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id>;",
            "// usage pattern 1:",
            "// lazy_segtree seg(N);",
            "// 区間加算、区間和取得",
            "// struct S {",
            "//     int64 value;",
            "//     int size;",
            "// };",
            "// using F = int64;",
            "// S op(S a, S b) { return {a.value + b.value, a.size + b.size}; }",
            "// S e() { return {0, 0}; }",
            "// S mapping(F f, S x) { return {x.value + f * x.size, x.size}; }",
            "// F composition(F f, F g) { return f + g; }",
            "// F id() { return 0; }",
            "// using lazy_segtree =",
            "//     atcoder::lazy_segtree<S, op, e, F, mapping, composition, id>;",
            "// usage pattern 2:",
            "// vector<S> v(N, {0, 1, 2});",
            "// lazy_segtree seg(v);",
        ],
    },
    "[Def] 1d vector": {
        "prefix": "def_vector_1d",
        "body": "vector<int> A(N, 0);",
    },
    "[Def] 2d vector": {
        "prefix": "def_vector_2d",
        "body": "vector<vector<int>> Mat(H, vector<int>(W, 0));",
    },
    "[Def] Nd vector": {
        "prefix": "def_vector_Nd",
        "body": "vector State(I, vector(J, vector(K, vector(L, 0))));",
        "description": "define Nd vector with Template argument deduction"
    },
    "[Def] pair": {
        "prefix": "def_pair",
        "body": "pair<int, int> pr = {1, 10};",
    },
    "[Def] map": {
        "prefix": "def_map_1d",
        "body": "map<int, int> mp = {{1, 10}, {2, 20}};",
    },
    "[Def] priority_queue": {
        "prefix": "def_priority_queue",
        "body": [
            "priority_queue<int> q;  // max",
            "priority_queue<int, vector<int>, greater<int>> q;  // min",
        ],
    },
    "[Def] deque": {
        "prefix": "def_deque",
        "body": "deque<int> dq;",
    },
    "[Def] lambda function": {
        "prefix": "def_func",
        "body": [
            "auto func = [&](int a, int b) {",
            "    if(a <= b)",
            "        return b - a;",
            "    else",
            "        return a - b;",
            "};",
        ],
    },
    "[Def] lambda recursive function": {
        "prefix": "def_func_recursive",
        "body": [
            "auto func_rec = [&](auto &&self, int a) -> int {",
            "    if(a == 0)",
            "        return 0;",
            "    else",
            "        return self(self, a - 1) + a;",
            "};",
        ],
    },
    "[Input] int": {
        "prefix": "cin_int",
        "body": [
            "int N;",
            "cin >> N;",
        ],
    },
    "[Input] string": {
        "prefix": "cin_string",
        "body": [
            "string S;",
            "cin >> S;",
        ],
    },
    "[Input] 1d vector": {
        "prefix": "cin_vector_1d",
        "body": [
            "vector<int> A(N, 0);",
            "for(auto &a : A) cin >> a;",
        ],
    },
    "[Input] 1d vector with position": {
        "prefix": "cin_vector_1d_with_pos",
        "body": [
            "vector<int> A(N, 0), pos(N, 0);",
            "for(int i = 0; i < N; i++) {",
            "    cin >> A[i];",
            "    pos[A[i]] = i;",
            "}",
        ],
    },
    "[Input] tree": {
        "prefix": "cin_tree",
        "body": [
            "vector<vector<int>> tree(N);",
            "for(int i = 0; i < M; i++) {",
            "    int a, b;",
            "    cin >> a >> b;",
            "    a--, b--;",
            "    tree[a].push_back(b);",
            "    tree[b].push_back(a);",
            "}",
        ],
    },
    "[Output] int": {
        "prefix": "cout_int",
        "body": "cout << x << endl;",
    },
    "[Output] double": {
        "prefix": "cout_double",
        "body": [
            "cout << fixed << setprecision(15);",
            "cout << x << endl;",
        ]
    },
    "[Output] 1d vector": {
        "prefix": "cout_vector_1d",
        "body": [
            "for(const auto &a : A) cout << a << \" \";",
            "cout << endl;",
        ],
    },
    "[Convert] char to int": {
        "prefix": "convert_char_to_int",
        "body": [
            "int num = int(S[i] - '0');"
        ],
    },
    "[Convert] string to int": {
        "prefix": "convert_string_to_int",
        "body": [
            "int num = stoi(S);"
        ],
    },
    "[Convert] split string": {
        "prefix": "split_string",
        "body": [
            "// Sに空白が含まれると正常に動かないので注意",
            "string S;",
            "const string sep = \".\";",
            "auto offset = string::size_type(0);",
            "while(1) {",
            "    auto pos = S.find(sep, offset);",
            "    if(pos == string::npos) {",
            "        cout << S.substr(offset) << endl;",
            "        break;",
            "    }",
            "    cout << S.substr(offset, pos - offset) << endl;",
            "    offset = pos + sep.size();",
            "}",
        ],
    },
    "[Method] calculate remainder & quotient": {
        "prefix": "calc_remainder_quotient",
        "body": [
            "int r = (x % mod + mod) % mod;",
            "int q = (x - r) / mod;",
        ],
    },
    "[Method] calculate 10's power": {
        "prefix": "calc_pow10",
        "body": "int64 TEN(int x) { return x == 0 ? 1LL : TEN(x - 1) * 10LL; }",
    },
    "[Method] calculate sum in 1d vector": {
        "prefix": "calc_sum_vec_1d",
        "body": "accumulate(begin(A), end(A), 0)",
    },
    "[Method] calculate sum in stack": {
        "prefix": "calc_sum_stack_1d",
        "body": [
            "int sum = 0;",
            "while(!stk.empty()) {",
            "    sum = sum + stk.top();",
            "    stk.pop();",
            "}",
        ],
    },
    "[Measure] calculate manhattan distance": {
        "prefix": "calc_manhattan_distance",
        "body": [
            "int distance = 0;",
            "for(int i = 0; i < N; i++) {",
            "    distance += abs(A[i] - B[i]);",
            "}",
        ],
    },
    "[Measure] calculate volume of common volume of 2 cube": {
        "prefix": "calc_volume_2cube",
        "body": [
            "using T = int;",
            "auto volumeCube = [&](T blX1, T blY1, T blZ1, T trX1, T trY1, T trZ1,",
            "                        T blX2, T blY2, T blZ2, T trX2, T trY2, T trZ2) {",
            "    return max(0, min(trX1, trX2) - max(blX1, blX2)) *",
            "            max(0, min(trY1, trY2) - max(blY1, blY2)) *",
            "            max(0, min(trZ1, trZ2) - max(blZ1, blZ2));",
            "};",
        ],
        "description": "blはbottom left、trはtop rightの意味。3つの共通部分の体積を求めたい場合はmin({trX1,trX2,trX3})のように",
    },
    "[Method] equal to 1d vector": {
        "prefix": "is_equal_vec_1d",
        "body": "equal(begin(A), end(A), begin(B), end(B));",
    },
    "[Method] equal to 2d vector": {
        "prefix": "is_equal_vec_2d",
        "body": [
            "bool ans = true;",
            "for(int i = 0; i < N; i++) {",
            "    ans &= equal(begin(A), end(A), begin(B), end(B));",
            "}",
        ],
    },
    "[Method] is palindrome": {
        "prefix": "is_kaibun",
        "body": [
            "auto check = [&](int64 a) {",
            "    string s = to_string(a);",
            "    return s == string(rbegin(s), rend(s));",
            "    // bool flag = true;",
            "    // for(int i = 0; i < s.size(); i++) {",
            "    //     if(s[i] != s[s.size() - 1 - i]) flag = false;",
            "    // }",
            "    // return flag;",
            "};",
        ],
        "description": "回文を判定する"
    },
    "[Method] is bit on": {
        "prefix": "is_bit_on",
        "body": [
            "for(int i = 0; i < N; i++) {",
            "    if(x & (1LL << i)) {",
            "        // logic",
            "    }",
            "}",
        ],
        "description": "回文を判定する"
    },
    "[Method] get max value generally": {
        "prefix": "val_max_general",
        "body": [
            "int64 mx = LLONG_MIN;  // -9e18",
            "for(int i = 0; i < N; i++) {",
            "    mx = max(mx, A[i]);",
            "}",
        ],
    },
    "[Method] get max value in 1d vector": {
        "prefix": "val_max_vec_1d",
        "body": "*max_element(begin(A), end(A))",
    },
    "[Method] get max value in map": {
        "prefix": "val_max_map",
        "body": [
            "auto order = [](const auto &left, const auto &right) {",
            "    // valueが同値なら、keyの小さい要素を取得",
            "    if(left.second == right.second)",
            "        return left.first > right.first;",
            "    else  // valueが大きい要素を取得",
            "        return left.second < right.second;",
            "};",
            "auto pr = *max_element(begin(mp), end(mp), order);",
            "// pr.first; pr.second;",
        ],
    },
    "[Method] get min value generally": {
        "prefix": "val_min_general",
        "body": [
            "int64 mn = LLONG_MAX;;  // 9e18",
            "for(int i = 0; i < N; i++) {",
            "    mn = min(mn, A[i]);",
            "}",
        ],
    },
    "[Method] get min value in 1d vector": {
        "prefix": "val_min_vec_1d",
        "body": "*min_element(begin(A), end(A))",
    },
    "[Method] get min value in map": {
        "prefix": "val_min_map",
        "body": [
            "auto order = [](const auto &left, const auto &right) {",
            "    // valueが同値なら、keyの小さい要素を取得",
            "    if(left.second == right.second)",
            "        return left.first < right.first;",
            "    else  // valueが小さい要素を取得",
            "        return left.second < right.second;",
            "};",
            "auto pr = *min_element(begin(mp), end(mp), order);",
            "// pr.first; pr.second;",
        ],
    },
    "[Method] get max length 1d in 2d vector": {
        "prefix": "get_max_length_vec_2d",
        "body": "ranges::max(vec_2d | views::transform([](auto &&v){ return size(v); }))",
        "description": "一番長い配列の配列数を返す",
    },
    "[Method] get index in 1d vector": {
        "prefix": "index_vec_1d",
        "body": "int id = find(begin(A), end(A), key) - begin(A);",
        "description": "return the size of vec if not found",
    },
    "[Method] get index at the bound greater than": {
        "prefix": "index_upper_bound_slice",
        "body": [
            "upper_bound(begin(A), end(A), key) - begin(A)",
        ],
    },
    "[Method] get index at the bound greater than or equal": {
        "prefix": "index_lower_bound_slice",
        "body": [
            "lower_bound(begin(A), end(A), key) - begin(A);",
        ],
    },
    "[Method] get index at the bound greater than for pair": {
        "prefix": "index_upper_bound_slice_pair",
        "body": [
            "vector<pair<int, int>> A;",
            "auto first_less = [](const auto &mid, const auto &pr) {",
            "    return mid < pr.first;",
            "};",
            "upper_bound(begin(A), end(A), key, first_less) - begin(A)",
        ],
    },
    "[Method] get index at the bound greater than or equal for pair": {
        "prefix": "index_lower_bound_slice_pair",
        "body": [
            "vector<pair<int, int>> A;",
            "auto first_less = [](const auto &pr, const auto &mid) {",
            "    return pr.first < mid;",
            "};",
            "lower_bound(begin(A), end(A), key, first_less) - begin(A);",
        ],
    },
    "[Method] get cumulative in 1d vector": {
        "prefix": "cumul_vec_1d",
        "body": [
            "vector<int> A(N), cuml(N+1, 0);",
            "for(int i = 0; i < N; i++) {",
            "    cuml[i + 1] = cuml[i] + A[i];",
            "}"
        ],
    },
    "[Method] get counter in 1d vector": {
        "prefix": "counter_vec_1d",
        "body": [
            "vector<int> A;",
            "map<int, int> cntr;",
            "for(int i = 0; i < N; i++) {",
            "    cntr[A[i]]++;",
            "}",
        ],
    },
    "[Method] get inversion num for 1d vector": {
        "prefix": "inversion_vec_1d",
        "body": [
            "// 転倒数を求めたい配列はA(0-indexed)とする。",
            "fenwick_tree bit(N);",
            "int64 inv = 0;",
            "for(int i = 0; i < N; i++) {",
            "    inv += i - bit.sum(0, A[i] + 1);",
            "    bit.add(A[i], 1);",
            "}",
            "// O(N^2)の求め方",
            "// int inv = 0;",
            "// for(int i = 0; i < N; i++)",
            "//     for(int j = 0; j < N; j++)",
            "//         if(i < j && A[i] > A[j]) inv++;",
        ],
    },
    "[Method] sort 1d vector ascending": {
        "prefix": "sort_vec_1d_ascending",
        "body": [
            "sort(begin(A), end(A));"
        ],
    },
    "[Method] sort 1d vector descending": {
        "prefix": "sort_vec_1d_descending",
        "body": [
            "sort(begin(A), end(A), greater<int>());"
        ],
    },
    "[Method] sort 1d pair flexible order": {
        "prefix": "sort_pair_1d",
        "body": [
            "auto order = [](const auto &left, const auto &right) {",
            "    // 第一要素が同値なら、第二要素で降順",
            "    if(left.first == right.first)",
            "        return left.second > right.second;",
            "    else  // 第一要素で昇順",
            "        return left.first < right.first;",
            "};",
            "sort(begin(A), end(A), order);",
        ],
    },
    "[Method] erase duplicate in 1d vector": {
        "prefix": "erase_duplicate_vec_1d",
        "body": [
            "sort(begin(A), end(A));",
            "A.erase(unique(begin(A), end(A)), end(A));",
        ],
        "description": "重複をなくす"
    },
    "[Method] regular expression": {
        "prefix": "regex",
        "body": [
            "if(regex_match(S, regex(\"A*B*C*\"))) {",
            "    cout << \"Yes\" << endl;",
            "} else {",
            "    cout << \"No\" << endl;",
            "}",
        ],
    },
    "[Frame] loop 1d": {
        "prefix": "loop_1d",
        "body": [
            "for(int i = 0; i < N; i++) {",
            "    // logic",
            "}",
        ],
    },
    "[Frame] loop 2d": {
        "prefix": "loop_2d",
        "body": [
            "for(int i = 0; i < N; i++) {",
            "    for(int j = 0; j < M; j++) {",
            "        // logic",
            "    }",
            "}"
        ],
    },
    "[Frame] loop 3d": {
        "prefix": "loop_3d",
        "body": [
            "for(int i = 0; i < N; i++) {",
            "    for(int j = 0; j < M; j++) {",
            "        for(int k = 0; k < L; k++) {",
            "            // logic",
            "        }",
            "    }",
            "}"
        ],
    },
    "[Frame] loop 2bit": {
        "prefix": "loop_2bit",
        "body": [
            "for(int64 i = 1; i <= (1LL << N); i<<=1) {",
            "    // logic",
            "}"
        ],
    },
    "[Frame] loop set": {
        "prefix": "loop_set",
        "body": [
            "set<int> st;",
            "for(const auto &s : st) {",
            "    // logic",
            "}",
        ],
    },
    "[Frame] loop map<int, int>": {
        "prefix": "loop_map",
        "body": [
            "map<int, int> mp;",
            "for(const auto &[key, val] : mp) {",
            "    // logic",
            "}",
        ],
    },
    "[Frame] loop 1d Permutation": {
        "prefix": "loop_permitation_1d",
        "body": [
            "vector<int> P;",
            "for(int i = 0; i < N; i++) {",
            "    P.emplace_back(i);",
            "}",
            "do {",
            "    for(int i = 0; i < N; i++) {",
            "        // logic",
            "        // int p = P[i];",
            "    }",
            "} while(next_permutation(begin(P), end(P)));"
        ],
    },
    "[Frame] loop 1d Combination no duplicate": {
        "prefix": "loop_combination_no_duplicate",
        "body": [
            "// N種類のものから重複を許さず3個選ぶ",
            "for(int i = 0; i < N; i++) {",
            "    for(int j = 0; j < i; j++) {",
            "        for(int k = 0; k < j; k++) {",
            "            cout << i << \" \" << j << \" \" << k << endl;",
            "        }",
            "    }",
            "}",
            "// for(int i = 0; i < N; i++) {",
            "//     for(int j = i + 1; j < N; j++) {",
            "//         for(int k = j + 1; k < N; k++) {",
            "//             cout << i << \" \" << j << \" \" << k << endl;",
            "//         }",
            "//     }",
            "// }",
        ],
    },
    "[Frame] loop 1d Combination duplicate": {
        "prefix": "loop_combination_duplicate",
        "body": [
            "// N種類のものから重複を許して3個選ぶ",
            "for(int i = 0; i < N; i++) {",
            "    for(int j = 0; j < i + 1; j++) {",
            "        for(int k = 0; k < j + 1; k++) {",
            "            cout << i << \" \" << j << \" \" << k << endl;",
            "        }",
            "    }",
            "}",
            "// for(int i = 0; i < N; i++) {",
            "//     for(int j = i; j < N; j++) {",
            "//         for(int k = j; k < N; k++) {",
            "//             cout << i << \" \" << j << \" \" << k << endl;",
            "//         }",
            "//     }",
            "// }",
        ],
    },
    "[Frame] loop bit full search": {
        "prefix": "loop_bit",
        "body": [
            "int Nbit = 5;",
            "// 3進数全探索の場合、int(pow(3,Nbit))に変換",
            "for(int i = 0; i < (1 << Nbit); i++) {",
            "    vector<int> bit(Nbit);",
            "    int pow = 1;",
            "    for(int j = 0; j < Nbit; j++) {",
            "        bit[j] = (i / pow) % 2;  // 3進数全探索の場合、(i/pow)%3に変換",
            "        pow <<= 1;               // 3進数全探索の場合、pow*=3に変換",
            "    }",
            "    // logic",
            "    cout << i << \": {\";",
            "    for(int j = 0; j < Nbit; j++) {",
            "        cout << bit[j] << \" \";",
            "    }",
            "    cout << \"}\" << endl;",
            "}",
        ],
    },
    "[Algorithm] binary search": {
        "prefix": "binary_search",
        "body": [
            "auto f = [&](int64 x) { return x >= K; };  // 判定問題",
            "int64 ng = -1, ok = 2e18;  // ng:解が存在しない値, ok:解が存在する値",
            "int64 ng = 2e18, ok = 0;  // 反転も可能",
            "while(abs(ok - ng) > 1) {",
            "    int64 mid = (ok + ng) / 2;",
            "    if(f(mid))",
            "        ok = mid;",
            "    else",
            "        ng = mid;",
            "}",
        ],
        "description": "binary search for a function",
    },
    "[Algorithm] general dfs": {
        "prefix": "dfs",
        "body": [
            "map<int, int> m;",
            "auto dfs = [&](auto &&self, const int64 x) -> int64 {",
            "    // exit conditions",
            "    if(x == 0) return 0;",
            "",
            "    // shortcut conditions",
            "",
            "    // use memo",
            "    if(m.count(x)) return m[x];",
            "",
            "    // try all moves",
            "    // pattern1:",
            "    // return m[x] = self(self, x1) + self(self, x2) + x;",
            "    //",
            "    // pattern2:",
            "    // for(int v = 0; v < N; v++) {",
            "    //     Stat.push_back(v);",
            "    //     self(self, Stat);",
            "    //     Stat.pop_back();",
            "    // }",
            "    //",
            "    // pattern3:",
            "    // if(self(self, x1)) return true;",
            "    // if(self(self, x2)) return true;",
            "    // return false",
            "};",
            "// usage:",
            "// dfs(dfs, 100);",
        ],
    },
    "[Algorithm] tree dfs": {
        "prefix": "dfs_tree",
        "body": [
            "// outer variable: vector<vector<int>> tree",
            "vector<int64> score_subtree(N, 0LL);",
            "auto dfs_tree = [&](auto &&self, const int ver, const int par) -> int64 {",
            "    // ロジックは、葉-枝-根の順に確かめる",
            "    // parent side logic",
            "    score_subtree[ver] += basic_score;",
            "    for(int i = 0; i < tree[ver].size(); i++) {",
            "        int ver_sub = tree[ver][i];",
            "        if(ver_sub == par) continue;",
            "        // shortcut",
            "        // int res = self(self, ver_sub, ver);",
            "        // if(res != -1) return res",
            "        // children side logic",
            "        score_subtree[ver] += self(self, ver_sub, ver);",
            "    }",
            "    // parent side logic",
            "    // int64 par_score = whole_socre - score_subtree[ver];",
            "    return score_subtree[ver];",
            "};",
            "// usage:",
            "// dfs_tree(dfs_tree, 0, -1);",
        ],
    },
    "[Algorithm] game dfs": {
        "prefix": "dfs_game",
        "body": [
            "// optional: WinCase wincase, WinCase wincase_opponent",
            "// tips: state watches the rest of moves, wincase records the effects of past moves",
            "// return the score difference of the best move in the given state",
            "auto dfs_game = [&](auto&& self, const WinCase wincase,",
            "                    const WinCase wincase_opponent,",
            "                    const State state) -> ScoreDiff {",
            "    // shortcut conditions",
            "    if(wincase_opponent == is_win) return -win_score;",
            "",
            "    // exit conditions",
            "    if(state == is_end) return score_in_end;",
            "",
            "    // use memo",
            "",
            "    // try all moves, select the best one",
            "    int res = INT_MIN;",
            "    for(next_s : all_of_next_state) {",
            "        update(wincase);",
            "        // self(self, wincase_opponent, wincase, next_s) return a score",
            "        // from opponent's view",
            "        res = max(res, score_of_move -",
            "                            self(self, wincase_opponent, wincase, next_s));",
            "    }",
            "    return res;",
            "};",
            "// usage:",
            "// dfs_game(dfs_game, WinCase, WinCase, State);  // A - B",
            "// (dfs_game(dfs_game, WinCase, WinCase, State) + sum) / 2;  // A's score",
            "// (sum - dfs_game(dfs_game, WinCase, WinCase, State)) / 2;  // B's score",
        ],
    },
    "[Algorithm] game dfs another": {
        "prefix": "dfs_game_another",
        "body": [
            "// outer variable: State state, map<state, ScoreDiff> dp",
            "// tips: state watches all of moves; past and next",
            "// return the score difference of the best move in the given state",
            "auto dfs_game = [&](auto&& self, const int turn) -> ScoreDiff {",
            "    // shortcut conditions, when lose",
            "    if(isWin(turn ^ 1)) return -winScore;",
            "",
            "    // exit conditions",
            "    if(isEnd()) return 0;",
            "",
            "    // use memo",
            "    if(dp.count(state)) return dp[state];",
            "",
            "    // try all moves, select the best one",
            "    int res = INT_MIN;",
            "    for(next_s : all_of_next_state) {",
            "        if(state[i][j] != -1) continue;",
            "        // self(self, turn ^ 1) return a score from opponent's view",
            "        state[i][j] = turn;",
            "        res = max(res, score_of_move - self(self, turn ^ 1));",
            "        state[i][j] = -1;",
            "    }",
            "    return dp[state] = res;",
            "};",
            "// usage:",
            "// dfs_game(dfs_game, 0);  // A - B",
            "// (dfs_game(dfs_game, 0) + sum) / 2;  // A's score",
            "// (sum - dfs_game(dfs_game, 0)) / 2;  // B's score",
        ],
    },
    "[Algorithm] bfs": {
        "prefix": "bfs",
        "body": [
            "// outer variable: int H, W",
            "auto bfs = [&](vector<int>& initS) -> vector<vector<int>> {",
            "    // define Value",
            "    vector<vector<int>> Val(H, vector<int>(W, 0));",
            "    Val[initS[0]][initS[1]] = 0;",
            "    // define queue",
            "    queue<vector<int>> Q;",
            "    Q.push(initS);",
            "    while(!Q.empty()) {",
            "        // pop queue",
            "        vector<int> q = Q.front();",
            "        Q.pop();",
            "",
            "        // skip state",
            "",
            "        // evaluate state",
            "        for(int i = 0; i < N; i++) {",
            "            // next state",
            "            vector<int> nq = {q[0] + dh, q[1] + dw};",
            "            // push state",
            "            if(nq[0] >= 0 and nq[0] < H and nq[1] >= 0 and nq[1] < W) {",
            "                Q.push(nq);",
            "            }",
            "        }",
            "    }",
            "    return Val;",
            "};",
            "// usage:",
            "// bfs({0, 0});",
        ],
    },
    "[Algorithm] imos": {
        "prefix": "imos",
        "body": [
            "// count",
            "vector<int64> imos(T + 1, 0);",
            "for(int i = 0; i < N; i++) {",
            "    imos[from] += num;",
            "    imos[to] -= num;",
            "}",
            "// simulate",
            "int64 cuml = imos[0];",
            "int64 mn = cuml;",
            "for(int i = 1; i < T; i++) {",
            "    // i=Tまで累積和を計算すると、注目する期間に加え1秒後の状態0を含む期間となる",
            "    // 1秒後の状態0は大概不要",
            "    cuml += imos[i];",
            "    mn = min(mn, cuml);",
            "}",
            "cout << mn << endl;",
        ],
    },
    "[Algorithm] 0-1knapsack DP": {
        "prefix": "dp_knapsack_01",
        "body": [
            "// outer variable: int N, W, vector<int> w(N, 0), v(N, 0)",
            "vector<int> dp(W + 1, 0);",
            "for(int i = 0; i < N; i++) {",
            "    for(int j = W; j >= 0; j--) {",
            "        if(j - w[i] < 0) continue;",
            "        dp[j] = max(dp[j], dp[j - w[i]] + v[i]);",
            "    }",
            "}",
            "// usage:",
            "// dp[W];",
        ],
        "description": "0-1でなく、個数制限なしの場合はjのループを0~Wのj++方向で回す。"
    },
    "[Algorithm] digit DP": {
        "prefix": "dp_digit",
        "body": [
            "// digit * sum_digit * is_smaller",
            "int D = N.size(), I = D * 10, F = 2;",
            "vector dp(D + 1, vector(I, vector(F, 0LL)));",
            "dp[0][0][0] = 1LL;",
            "for(int d = 0; d < D; d++) {",
            "    int Nd = int(N[d] - '0');",
            "    for(int i = 0; i < I; i++) {",
            "        // // smaller -> smaller",
            "        // for(int t = 0; t < 10; t++) {",
            "        //     if(i + t >= I) continue;",
            "        //     dp[d + 1][i + t][1] += dp[d][i][1];",
            "        // }",
            "        // // exact -> smaller",
            "        // for(int t = 0; t < Nd; t++) {",
            "        //     if(i + t >= I) continue;",
            "        //     dp[d + 1][i + t][1] += dp[d][i][0];",
            "        // }",
            "",
            "        // // exact -> exact",
            "        // if(i + Nd >= I) continue;",
            "        // dp[d + 1][i + Nd][0] += dp[d][i][0];",
            "",
            "        // way to put the above together",
            "        for(int f = 0; f < F; f++) {",
            "            for(int t = 0; t < 10; t++) {",
            "                if(i + t >= I) continue;",
            "                if(!f and t > Nd) continue;",
            "                dp[d + 1][i + t][f || (t < Nd)] += dp[d][i][f];",
            "            }",
            "        }",
            "    }",
            "}",
            "// usage",
            "// dp[D][i][1] + dp[D][i][0]; N=0を数え上げない時は-1する",
        ],
        "description": "桁DP"
    },
    "[Algorithm] rerouting tree DP": {
        "prefix": "dp_rerouting",
        "body": [
            "// https://ei1333.hateblo.jp/entry/2017/04/10/224413",
            "// outer variable: vector<vector<int>> tree, vector<int64> Dsubtree",
            "int root_ver = 0;",
            "vector<int64> score(N, 0LL);",
            "auto rerouting = [&](auto &&self, const int ver, const int par,",
            "                     const int64 Dpar) -> void {",
            "    // solve ver's score",
            "    score[ver] = Dsubtree[ver] + Dpar;",
            "    for(int i = 0; i < tree[ver].size(); i++) {",
            "        int ver_sub = tree[ver][i];",
            "        if(ver_sub == par) continue;",
            "        // prepare next Dpar from ver_sub's side",
            "        // int64 Dpar_sub = score[ver] - Dsubtree[ver_sub];",
            "        // solve ver_sub's socre",
            "        self(self, ver_sub, ver, Dpar_sub);",
            "    }",
            "};",
            "// usage:",
            "// ルートノードには親サイドが存在しないので、Dparは0",
            "// rerouting(rerouting, root_ver, -1, 0);",
            "// *max_element(begin(score), end(score));",
        ],
        "description": "全方位木DP"
    },
    "[Algorithm] Dijkstra": {
        "prefix": "dijkstra",
        "body": [
            "constexpr int64 INF = (1LL << 60);",
            "struct Edge {",
            "    int to;",
            "    int64 cost;",
            "};",
            "using Graph = vector<vector<Edge>>;",
            "using Pair = pair<int64, int>;  // {distance, from}",
            "",
            "// ダイクストラ法:",
            "// 負の閉路がなければ実行可能",
            "// distances は頂点数と同じサイズ, 全要素 INF で初期化しておく",
            "// Graph G(V);",
            "//   G[from].emplace_back({to, cost});",
            "// vector<int64> d(V, INF);",
            "// Dijkstra(G, d, 0);",
            "// cout << d[V - 1];",
            "void Dijkstra(const Graph& graph, vector<int64>& distances,",
            "              int startIndex) {",
            "    // 「現時点での最短距離, 頂点」の順に取り出す priority_queue",
            "    // デフォルトの priority_queue は降順に取り出すため greater を使う",
            "    priority_queue<Pair, vector<Pair>, greater<Pair>> q;",
            "    q.emplace((distances[startIndex] = 0), startIndex);",
            "",
            "    while(!q.empty()) {",
            "        const int64 distance = q.top().first;",
            "        const int from = q.top().second;",
            "        q.pop();",
            "",
            "        // 最短距離でなければ処理しない",
            "        if(distances[from] < distance) {",
            "            continue;",
            "        }",
            "",
            "        // 現在の頂点からの各辺について",
            "        for(const auto& edge : graph[from]) {",
            "            // 連結がなければスキップする",
            "",
            "            // to までの新しい距離",
            "            const int64 d = (distances[from] + edge.cost);",
            "",
            "            // d が現在の記録より小さければ更新",
            "            if(d < distances[edge.to]) {",
            "                q.emplace((distances[edge.to] = d), edge.to);",
            "            }",
            "        }",
            "    }",
            "}",
        ],
    },
    "[Class] Combination": {
        "prefix": "Combination",
        "body": [
            "class Combination {",
            "  public:",
            "    Combination(int _n, int _r) : n(_n), r(_r), comb() { comb.resize(_r); }",
            "",
            "    void for_comb(std::function<void(vector<int>)> f) {",
            "        __for_comb(n, r, r, f);",
            "    }",
            "",
            "    void __for_comb(int size, int rest, int depth,",
            "                    std::function<void(vector<int>)> f) {",
            "        if(depth == 0) {",
            "            f(comb);",
            "            return;",
            "        }",
            "",
            "        for(int i = 0; i < size; i++) {",
            "            comb[rest - depth] = i;",
            "            __for_comb(i, rest, depth - 1, f);",
            "        }",
            "    }",
            "",
            "  private:",
            "    const int n, r;",
            "    vector<int> comb;",
            "};",
            "// usage:",
            "// Combination comb(10, 3);",
            "// comb.for_comb([](const auto &cmb) {",
            "//     cout << cmb[0] << cmb[1] << cmb[2] << endl;",
            "// });",
        ]
    },
    "[Data] Binominal": {
        "prefix": "Binominal",
        "body": [
            "struct Binomial {",
            "    vector<mint> fac, invfac, inv;",
            "    Binomial(int n) : fac(n + 1), invfac(n + 1), inv(n + 1) {",
            "        fac[0] = invfac[0] = inv[0] = 1;",
            "        for(int i = 1; i <= n; i++)",
            "            fac[i] = fac[i - 1] * i;",
            "        invfac[n] = fac[n].inv();",
            "        for(int i = n - 1; i >= 0; i--) {",
            "            invfac[i] = invfac[i + 1] * (i + 1);",
            "            inv[i + 1] = invfac[i + 1] * fac[i];",
            "        }",
            "    }",
            "} C{303030};",
        ]
    },
    "[Data] Direction 4": {
        "prefix": "data_direction_4",
        "body": [
            "vector<int> rotation = {2, 0, 3, 1};                 // URDL",
            "vector<int> dh = {0, 0, -1, 1}, dw = {1, -1, 0, 0};  // RLUD",
        ]
    },
}